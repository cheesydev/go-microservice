// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pi.proto

package pi

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PiAproximation struct {
	Value                float32  `protobuf:"fixed32,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PiAproximation) Reset()         { *m = PiAproximation{} }
func (m *PiAproximation) String() string { return proto.CompactTextString(m) }
func (*PiAproximation) ProtoMessage()    {}
func (*PiAproximation) Descriptor() ([]byte, []int) {
	return fileDescriptor_42e306efa434d900, []int{0}
}

func (m *PiAproximation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PiAproximation.Unmarshal(m, b)
}
func (m *PiAproximation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PiAproximation.Marshal(b, m, deterministic)
}
func (m *PiAproximation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PiAproximation.Merge(m, src)
}
func (m *PiAproximation) XXX_Size() int {
	return xxx_messageInfo_PiAproximation.Size(m)
}
func (m *PiAproximation) XXX_DiscardUnknown() {
	xxx_messageInfo_PiAproximation.DiscardUnknown(m)
}

var xxx_messageInfo_PiAproximation proto.InternalMessageInfo

func (m *PiAproximation) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func init() {
	proto.RegisterType((*PiAproximation)(nil), "PiAproximation")
}

func init() {
	proto.RegisterFile("pi.proto", fileDescriptor_42e306efa434d900)
}

var fileDescriptor_42e306efa434d900 = []byte{
	// 131 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x28, 0xc8, 0xd4, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x97, 0x92, 0x4e, 0xcf, 0xcf, 0x4f, 0xcf, 0x49, 0xd5, 0x07, 0xf3, 0x92,
	0x4a, 0xd3, 0xf4, 0x53, 0x73, 0x0b, 0x4a, 0x2a, 0x21, 0x92, 0x4a, 0x6a, 0x5c, 0x7c, 0x01, 0x99,
	0x8e, 0x05, 0x45, 0xf9, 0x15, 0x99, 0xb9, 0x89, 0x25, 0x99, 0xf9, 0x79, 0x42, 0x22, 0x5c, 0xac,
	0x65, 0x89, 0x39, 0xa5, 0xa9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x4c, 0x41, 0x10, 0x8e, 0x91, 0x3d,
	0x17, 0x53, 0x40, 0xa6, 0x90, 0x25, 0x17, 0x0f, 0x5c, 0x6d, 0x6a, 0x40, 0xa6, 0x90, 0x98, 0x1e,
	0xc4, 0x6c, 0x3d, 0x98, 0xd9, 0x7a, 0xae, 0x20, 0xb3, 0xa5, 0xf8, 0xf5, 0x50, 0x0d, 0x55, 0x62,
	0x48, 0x62, 0x03, 0x2b, 0x31, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xbb, 0xc0, 0x85, 0x27, 0x98,
	0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PiClient is the client API for Pi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PiClient interface {
	AproximatePi(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PiAproximation, error)
}

type piClient struct {
	cc grpc.ClientConnInterface
}

func NewPiClient(cc grpc.ClientConnInterface) PiClient {
	return &piClient{cc}
}

func (c *piClient) AproximatePi(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PiAproximation, error) {
	out := new(PiAproximation)
	err := c.cc.Invoke(ctx, "/Pi/AproximatePi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PiServer is the server API for Pi service.
type PiServer interface {
	AproximatePi(context.Context, *empty.Empty) (*PiAproximation, error)
}

// UnimplementedPiServer can be embedded to have forward compatible implementations.
type UnimplementedPiServer struct {
}

func (*UnimplementedPiServer) AproximatePi(ctx context.Context, req *empty.Empty) (*PiAproximation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AproximatePi not implemented")
}

func RegisterPiServer(s *grpc.Server, srv PiServer) {
	s.RegisterService(&_Pi_serviceDesc, srv)
}

func _Pi_AproximatePi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiServer).AproximatePi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pi/AproximatePi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiServer).AproximatePi(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Pi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Pi",
	HandlerType: (*PiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AproximatePi",
			Handler:    _Pi_AproximatePi_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pi.proto",
}
